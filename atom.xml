<?xml version="1.0" encoding="utf-8"?>


<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
    <title type="text">jiangjiawen的博客</title>
    <subtitle type="html">MemE 是一个强大且可高度定制的 GoHugo 博客主题，专为个人博客设计。</subtitle>
    <updated>2020-04-03T16:36:47+08:00</updated>
    <id>/</id>
    <link rel="alternate" type="text/html" href="/" />
    <link rel="self" type="application/atom+xml" href="/atom.xml" />
    <author>
            <name>jiangjiawen</name>
            <uri>/</uri>
            
                <email>jiangjiawentz@gmail.com</email>
            </author>
    <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    <generator uri="https://gohugo.io/" version="0.67.1">Hugo</generator>
        <entry>
            <title type="text">编程语言陷阱收录</title>
            <link rel="alternate" type="text/html" href="/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%99%B7%E9%98%B1%E6%94%B6%E5%BD%95/" />
            <id>/posts/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%99%B7%E9%98%B1%E6%94%B6%E5%BD%95/</id>
            <updated>2020-04-03T16:35:23+08:00</updated>
            <published>2020-04-02T09:38:10+08:00</published>
            <author>
                    <name>jiangjiawen</name>
                    <uri>jiangjiawen.github.io</uri>
                    <email>jiangjiawentz@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[简要说明 有些代码写出来好像没什么问题，但是运行却得不出想要的结果，这种意料之外的代码……]]></summary>
            
                <content type="html"><![CDATA[<h2 id="简要说明">简要说明</h2>
<p>有些代码写出来好像没什么问题，但是运行却得不出想要的结果，这种意料之外的代码可以称为陷阱，英文叫做gotchas。这个博客就是记录那些从别人文章里看到过的陷阱，自己写一遍也是加深印象，而且这些陷阱也能帮助我理解语言。深入理解语言一直是我的弱项。</p>
<h2 id="go-gotchas">Go Gotchas</h2>
<h3 id="slice-gotchas">Slice Gotchas</h3>
<p>很多Golang的博客好像都会讲到这个slice的问题，基本都是出现在slice的内建函数<code>append()</code>的问题。下面是一个简单例子：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="kd">func</span> <span class="nf">doSth</span><span class="p">(</span><span class="nx">sliceint</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;before one=%v\n&#34;</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">)</span>
	<span class="nx">sliceanother</span> <span class="o">:=</span> <span class="nx">sliceint</span><span class="p">[:]</span>
	<span class="nx">sliceanother</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">sliceanother</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;after append one=%v, another=%v\n&#34;</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">,</span> <span class="nx">sliceanother</span><span class="p">)</span>
	<span class="nx">sliceanother</span><span class="p">[</span><span class="mi">0</span><span class="p">]=</span><span class="mi">99</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;after assign one=%v, another=%v\n&#34;</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">,</span> <span class="nx">sliceanother</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">slice10</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
	<span class="nf">doSth</span><span class="p">(</span><span class="nx">slice10</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出结果是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="nx">before</span> <span class="nx">one</span><span class="p">=[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">after</span> <span class="nx">append</span> <span class="nx">one</span><span class="p">=[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">another</span><span class="p">=[</span><span class="mi">0</span> <span class="mi">100</span><span class="p">]</span>
<span class="nx">after</span> <span class="nx">assign</span> <span class="nx">one</span><span class="p">=[</span><span class="mi">99</span><span class="p">],</span> <span class="nx">another</span><span class="p">=[</span><span class="mi">99</span> <span class="mi">100</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>问题就是Go的slice,array是引用类型，将一个slice赋给另一个slice，它们底层指向的数组都是同一个数组，所以如果要是想让两个slice不同需要使用<code>copy()</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="kd">func</span> <span class="nf">doCopy</span><span class="p">(</span><span class="nx">sliceint</span> <span class="p">[]</span><span class="kt">int</span><span class="p">){</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;before one=%v\n&#34;</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">)</span>
	<span class="nx">sliceanother</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">sliceint</span><span class="p">),</span> <span class="nb">len</span><span class="p">(</span><span class="nx">sliceint</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>
	<span class="nb">copy</span><span class="p">(</span><span class="nx">sliceanother</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">)</span>
	<span class="nx">sliceanother</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">sliceanother</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;after append one=%v, another=%v\n&#34;</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">,</span> <span class="nx">sliceanother</span><span class="p">)</span>
	<span class="nx">sliceanother</span><span class="p">[</span><span class="mi">0</span><span class="p">]=</span><span class="mi">99</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;after assign one=%v, another=%v\n&#34;</span><span class="p">,</span> <span class="nx">sliceint</span><span class="p">,</span> <span class="nx">sliceanother</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">slice10</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
	<span class="nf">doCopy</span><span class="p">(</span><span class="nx">slice10</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>输出结果就正常了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="nx">before</span> <span class="nx">one</span><span class="p">=[</span><span class="mi">0</span><span class="p">]</span>
<span class="nx">after</span> <span class="nx">append</span> <span class="nx">one</span><span class="p">=[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">another</span><span class="p">=[</span><span class="mi">0</span> <span class="mi">100</span><span class="p">]</span>
<span class="nx">after</span> <span class="nx">assign</span> <span class="nx">one</span><span class="p">=[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">another</span><span class="p">=[</span><span class="mi">99</span> <span class="mi">100</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>分辨好用copy就对了。本内容参考博客 <a href="https://bluxte.net/musings/2018/04/10/go-good-bad-ugly/">go-good-bad-ugly</a>。代码在<a href="https://github.com/jiangjiawen/learncodebyexample/blob/master/go/detail/slicegotchas.go">github</a></p>
<h3 id="go-defer">go defer</h3>
<p>这个例子很奇特，和函数执行也有关系，来自蔡超谈软件的公众号。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="kd">func</span> <span class="nf">doPrint</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;inner&#34;</span><span class="p">)</span>
	<span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;innerinner&#34;</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">defer</span> <span class="nf">doPrint</span><span class="p">()()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;main&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这段代码输出为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-GO" data-lang="GO"><span class="nx">inner</span>
<span class="nx">main</span>
<span class="nx">innerinner</span>
</code></pre></td></tr></table>
</div>
</div><p>我的个人理解是注意<code>doPrint()</code>这里的两个<code>()</code>，我认为的顺序是第一个<code>()</code>是函数本身，里面打印<code>inner</code>为普通执行，第二个<code>()</code>表述函数的返回，它被<code>defer</code>了，所以再执行<code>mian</code>后才会执行<code>innerinner</code>。</p>
<p>更多<code>defer</code>陷阱可以看<a href="https://blog.learngoprogramming.com/gotchas-of-defer-in-go-1-8d070894cb01">gotchas-of-defer-in-go</a></p>
<h3 id="pass-by-pointer-is-not-a-good-performance">pass by pointer is not a good performance</h3>
<p>如果想通过函数同时改变某个变量的值，传指针是一个非常好的操作，但是没想到在Go语言中，它的性能实际上却并没有提高。因为Go有GC机制，使用指针就将你的数据放在了堆中，GC会去判断销毁，这是一个损耗时间的地方，反而不如使用一种特别的传值方法。</p>
<p>这个个博客<a href="https://medium.com/better-programming/why-you-should-avoid-pointers-in-go-36724365a2a7">why-you-should-avoid-pointers-in-go</a> 就介绍了这种特别方法。这个方法就是改变值并返回值，很简单。代码区别如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="kd">type</span> <span class="nx">CoffeeMachine</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">UID</span>                 <span class="kt">string</span>
	<span class="nx">Description</span>         <span class="kt">string</span>
	<span class="nx">NumberOfCoffeeBeans</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewCoffeeMachinePointer</span><span class="p">()</span> <span class="o">*</span><span class="nx">CoffeeMachine</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">CoffeeMachine</span><span class="p">{}</span>
<span class="p">}</span>
<span class="c1">//指针方法
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">CoffeeMachine</span><span class="p">)</span> <span class="nf">SetUIDPointer</span><span class="p">(</span><span class="nx">uid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cm</span><span class="p">.</span><span class="nx">UID</span> <span class="p">=</span> <span class="nx">uid</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">CoffeeMachine</span><span class="p">)</span> <span class="nf">SetDescriptionPointer</span><span class="p">(</span><span class="nx">description</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cm</span><span class="p">.</span><span class="nx">Description</span> <span class="p">=</span> <span class="nx">description</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="o">*</span><span class="nx">CoffeeMachine</span><span class="p">)</span> <span class="nf">SetNumberOfCoffeeBeansPointer</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cm</span><span class="p">.</span><span class="nx">NumberOfCoffeeBeans</span> <span class="p">=</span> <span class="nx">n</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewCoffeeMachineValue</span><span class="p">()</span> <span class="nx">CoffeeMachine</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">CoffeeMachine</span><span class="p">{}</span>
<span class="p">}</span>
<span class="c1">//传值方法
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="nx">CoffeeMachine</span><span class="p">)</span> <span class="nf">SetUIDValue</span><span class="p">(</span><span class="nx">uid</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">CoffeeMachine</span> <span class="p">{</span>
	<span class="nx">cm</span><span class="p">.</span><span class="nx">UID</span> <span class="p">=</span> <span class="nx">uid</span>
	<span class="k">return</span> <span class="nx">cm</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="nx">CoffeeMachine</span><span class="p">)</span> <span class="nf">SetDescriptionValue</span><span class="p">(</span><span class="nx">description</span> <span class="kt">string</span><span class="p">)</span> <span class="nx">CoffeeMachine</span> <span class="p">{</span>
	<span class="nx">cm</span><span class="p">.</span><span class="nx">Description</span> <span class="p">=</span> <span class="nx">description</span>
	<span class="k">return</span> <span class="nx">cm</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">cm</span> <span class="nx">CoffeeMachine</span><span class="p">)</span> <span class="nf">SetNumberOfCoffeeBeansValue</span><span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">)</span> <span class="nx">CoffeeMachine</span> <span class="p">{</span>
	<span class="nx">cm</span><span class="p">.</span><span class="nx">NumberOfCoffeeBeans</span> <span class="p">=</span> <span class="nx">n</span>
	<span class="k">return</span> <span class="nx">cm</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkWithPointer</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cm</span> <span class="o">:=</span> <span class="nf">NewCoffeeMachinePointer</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">cm</span><span class="p">.</span><span class="nf">SetUIDPointer</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;random generate uid %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">))</span>
		<span class="nx">cm</span><span class="p">.</span><span class="nf">SetNumberOfCoffeeBeansPointer</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
		<span class="nx">cm</span><span class="p">.</span><span class="nf">SetDescriptionPointer</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;This is the best coffe machine that is around! This is version %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">))</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">BenchmarkWithValue</span><span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">B</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cm</span> <span class="o">:=</span> <span class="nf">NewCoffeeMachineValue</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">b</span><span class="p">.</span><span class="nx">N</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">cm</span> <span class="p">=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">SetUIDValue</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;random generate uid %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">))</span>
		<span class="nx">cm</span> <span class="p">=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">SetNumberOfCoffeeBeansValue</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
		<span class="nx">cm</span> <span class="p">=</span> <span class="nx">cm</span><span class="p">.</span><span class="nf">SetDescriptionValue</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;This is the best coffe machine that is around! This is version %d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">))</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>结果是传值方法教好，结果如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-Go" data-lang="Go"><span class="nx">goos</span><span class="p">:</span> <span class="nx">darwin</span>
<span class="nx">goarch</span><span class="p">:</span> <span class="nx">amd64</span>
<span class="nx">BenchmarkWithPointer</span><span class="o">-</span><span class="mi">4</span>           <span class="mi">3996082</span>               <span class="mi">299</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>
<span class="nx">BenchmarkWithValue</span><span class="o">-</span><span class="mi">4</span>             <span class="mi">4010985</span>               <span class="mi">294</span> <span class="nx">ns</span><span class="o">/</span><span class="nx">op</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="js-gotchas">JS Gotchas</h2>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="/tags/programming/" term="programming" label="programming" />
                            
                        
                            
                            
                            
                                <category scheme="/tags/%E6%94%B6%E9%9B%86/" term="收集" label="收集" />
                            
                        
                    
                
            
        </entry>
    
        <entry>
            <title type="text">夷夏之辩</title>
            <link rel="alternate" type="text/html" href="/posts/%E5%A4%B7%E5%A4%8F%E4%B9%8B%E8%BE%A9/" />
            <id>/posts/%E5%A4%B7%E5%A4%8F%E4%B9%8B%E8%BE%A9/</id>
            <updated>2020-03-22T21:20:38+08:00</updated>
            <published>2020-03-22T21:16:22+08:00</published>
            <author>
                    <name>jiangjiawen</name>
                    <uri>jiangjiawen.github.io</uri>
                    <email>jiangjiawentz@gmail.com</email>
                    </author>
            <rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.zh)</rights>
    
    <summary type="html"><![CDATA[&emsp;&emsp;看到这个名词，我第一个感兴趣的就是这个夏字。以前不知道从哪里……]]></summary>
            
                <content type="html"><![CDATA[<br/>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;看到这个名词，我第一个感兴趣的就是这个夏字。以前不知道从哪里看到，有人说各个朝代的名称其实都是很美好的词。嘿，还真是，读起来也特别的顺口，夏商周，秦汉晋隋，唐宋元明清。所以为什么这个朝代取这个字呢？
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;这里是对“夷夏之辩”进行名词记录，所以这里就先对夏字进行了一番查证。古文中的夏字是如何呢，《说文》一书的说解，夏字的构成却是一个人的形象，云：“中國之人也。从夊，从頁，从𦥑。𦥑，兩手；夊，兩足也。”[1] 额，这里也查了下，頁，頭也。下面就是篆文中的夏字，的确是像个人。
</p>
<div style="text-align: center">
<!-- <img src="../../resources/_gen/images/夏古.png" alt="pic" title="图1" width="40" height="40" /> -->
<img src="/images/夏古.png" alt="pic" title="图1" width="100" height="100">
</div>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;夏这里即作为人，夏人，中国之人。我这里想夏朝建立之后，区别周围其他部落，夏所统治地区一定是文化经济高度发达的区域，否则也不会中国大一统思想中的朝代的开端。那么夏所代表的文明必然是领先周围落后部落的。所以有些文献资料中说夏为雅，夏为大。那么这些周边落后部落就为夷了。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;夏夷之辩，是儒家的思想，或者说是汉代公羊学派的主要主张。公羊学派是研究《春秋》延伸出来的学派。公羊学派的人物传承关系是子夏->公羊高->公羊地->羊敢->公羊寿->胡毋子都，董仲舒->何休。好吧，只有一个我熟悉的名字，董仲舒。初看公羊学像是个家学，但是战国比较乱而且连竹简都没有，口耳相传下来，很不方便。到汉景帝，才有公羊寿和胡毋子都将其著在竹简当中。后来董仲舒在汉武帝时发迹了，因为本身董仲舒就是专学公羊学，所以汉朝公羊学很是兴盛，公羊学乃经学十四博士之一。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;董仲舒，都知道，独尊儒术，大一统思想。董仲舒是儒家传人，虽然也捣鼓了阴阳家的一些东西，什么天人感应，五行学说，君权神授之类的。他这些思想也不是自己想出来的，出处就是公羊学。董仲舒为代表的公羊学是研究史书《春秋》的，所以从历史角度来看，他们侧重于大一统思想，从而思考夷夏之辩就不是什么很奇怪的事。中国从周朝便开始其实已经开始从中原向外不断进行拓展国土，文明的碰撞必不可少，自身文明的团结也必不可少。理论的支撑说服尤为重要，加强向心力乃至维护以帝国皇帝为绝对核心的封建中央集权制度。我相信汉武帝肯定特别高兴看到公羊学说兴盛，帝国外拒匈奴需要，汉帝国其实继承自秦但是也有七国之乱，自己的统治也需要。这里不得不提秦始皇，历史书为什么写统一度量衡，车同轨，书同文，这些真的厉害。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;公羊学的夷夏之辩究竟怎样呢？孔子修改的《春秋》，他自然也有他的观点，韩愈在其著作《原道》中说孔子观点是“诸侯用夷礼则夷之，夷狄进于中国则中国之”。这是孔子的看法，文化礼仪为重要依据。汉朝的公羊学自然也是这种观点。董仲舒服务皇权，结合汉武时期的情况，主张“王者爱及四夷”。董仲舒强调夷夏之别，但也重视德化四夷。在董仲舒看来，对于那些仰慕华夏文化、遵守礼义道德的夷狄民族要加以肯定，要对它们以中国相待。同时，对于没有归化的夷狄民族也应该以仁爱之心对待它们。董仲舒的理由是，既然天下是君王的天下，天下之人都是君王的臣民，夷狄当然也不例外。君王要推行仁政，以仁爱之心对待臣民，也就必须要以仁爱之心对待夷狄。所以董仲舒说：“故王者爱及四夷，危者爱及旁侧，亡者爱及独身。独身者，虽立天子诸侯之位，一夫之人耳，无臣民之用矣。”[4] 
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;汉代公羊学的最后集大成者为何休，何休处在东汉的乱世当中，他从《春秋》的研究中得到强烈的启发，他提出了公羊学的三世说，即“所传闻世”是“据乱世”，“内其国外其夏”；“所闻世”是“升平世”，“内诸夏外夷狄”；“所见世”是“太平世”，“夷狄进至于爵，天下远近大小若一”。[4]这里不得不说三世说这种宿命论虽然不科学，但是它的确讲了在诸夏和诸夷文明互相碰撞时，夏人应该做什么。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;公羊学派果然在清末开始出现大量研究。夷夏夷夏，自鸦片战争始，的确对中国人冲击太大。“师夷长技以制夷”，公羊学也是会变通的，学先进技术和文化不丢人。感念其实自1840年以来，我们一直都在学习，落后太多了。我是学计算机的，深感什么都是别人发明的羞辱感，其他学科可能更甚。其实说什么夷夏之别也没意思了。这里想说我们现在其实在“所闻世”吧，不断被外面文化不断冲击，我们自己要保护发展好自己的文明而不是完全被夷文化所吞没。额，当然以前我们是有着领先文明的优越感，可是现在夷夏，。。。，但是保护华夏文明总没错，凝聚自身民族。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
<b>题外话</b>，最近看的小说《玄浑道章》，作者的思想就有这个意思，以礼为标准，判断诸夏和外夷。哎，其实别人不清楚，我个人现在的感觉就是文化自信是现代中国的重中之中，基础学科加上计算机一定要自身硬，否则真没底气。再怎么说，中国“是一个伪装成民族国家的文明”，中国的社会主义是中国文明的社会主义。（前半句来自《文明的冲突》）。额，前面的一些和后面一些直接摘抄了百度百科，因为不是论文，就是自己的兴趣记录，所以就这样。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
<p><b>其他名词</b>：</p>
<p>  另有常说的华夏，华夏：《尚书正义》：“冕服华章曰华，大国曰夏”。</p>
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;《春秋公羊传》，传子夏的弟子公羊高对《春秋》的注释，公羊派即《春秋》的传者。《春秋》就是史书，春天到秋天的事情，而春秋主要就是鲁国的国史，孔子修改过。因春秋“字字针砭”，春秋笔法来自于此。阴阳怪气？
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;春秋有三传，左氏，公羊，谷梁。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;十四博士，计有：《易》：施氏、孟氏、梁丘氏、京氏，(即施雠、孟喜、梁丘贺、京房)四家;《书》：欧阳氏、大、小夏侯(夏侯胜与夏侯建)三家;《诗》：齐、鲁、韩三家;《礼》：戴德、戴圣、庆普三家;《春秋》，《公羊》二家：严彭祖、颜安乐;《谷梁》一家。十六家均系今文经学。其学传至东汉光武时期，明立“十四博士”，上列十六家除《庆氏礼》与《谷梁春秋》，均立。故后人亦概言西汉今文经学为“十四博士”。十四博士其实就是研读五经的学官，为皇帝的顾问。
</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
&emsp;&emsp;公羊学，三世说，“所传闻世”是“据乱世”，“内其国外其夏”；“所闻世”是“升平世”，“内诸夏外夷狄”；“所见世”是“太平世”，“夷狄进至于爵，天下远近大小若一”。但在据乱世――升平世――太平世“三世”循环范围内，又存在着一个不断“向前”发展的序列，因而也就是一个“进化”的序列。这是一种进化史观。
</p>
<p>参考文献：</p>
<p>[1] 葛英会. 夏字形义考[J]. 中国国家博物馆馆刊, 2009(1):66-68.</p>
<p>[2] 李殿元. 关于“夏”朝得名的研究[J]. 文史杂志, 2013(6):8-12.</p>
<p style="text-align:justify;text-justify:inter-ideograph;">
[3] 孙秀伟. 董仲舒从“春秋公羊学”到“天人感应”的理论可能及其原因探析——以“春秋公羊学”诠释方法为视域[J]. 广西师范大学学报：哲学社会科学版, 2009, 45(5):10-14.
<p>[4] 汪高鑫. 论汉代公羊学的夷夏之辨[J]. 南开学报(哲学社会科学版), 2006, 2006(1):87-92.</p>
<p>[5] 贾小叶. 1840～1900年间国人&quot;夷夏之辨&quot;观念的演变[J]. 史学月刊, 2007(10).</p>
</p>
]]></content>
            
            
            
            
            
                
                    
                
                    
                        
                            
                            
                            
                                <category scheme="/tags/history/" term="history" label="history" />
                            
                        
                            
                            
                            
                                <category scheme="/tags/%E7%9E%8E%E5%87%A0%E6%8A%8A%E8%AF%B4/" term="瞎几把说" label="瞎几把说" />
                            
                        
                    
                
            
        </entry>
    
</feed>
